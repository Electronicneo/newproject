import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { <%=classify(name)%>Component } from './<%=name%>.component';
import {Store, StoreModule} from '@ngrx/store';
import * as <%=name%>Reducer from '../store/<%=name%>.reducer';
import * as <%=classify(name)%>Action from '../store/<%=name%>.actions';
import {NO_ERRORS_SCHEMA} from '@angular/core';
import {TranslateModule} from '@ngx-translate/core';
import {HttpClientTestingModule} from '@angular/common/http/testing';
import {NbDialogModule, NbLayoutModule, NbThemeModule, NbToastrModule} from '@nebular/theme';
import * as fromRoot from '@core/reducers';

describe('<%=classify(name)%>Component', () => {
  let component: <%=classify(name)%>Component;
  let fixture: ComponentFixture<<%=classify(name)%>Component>;
  let store: Store<<%=name%>Reducer.State>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ <%=classify(name)%>Component ],
      imports: [StoreModule.forRoot(fromRoot.reducers),
                TranslateModule.forRoot(),
                HttpClientTestingModule,
                NbToastrModule.forRoot(),
                NbThemeModule.forRoot(),
                NbLayoutModule,
                NbDialogModule.forRoot()],
      schemas: [ NO_ERRORS_SCHEMA ],
    })
    .compileComponents().then(() => {
      fixture = TestBed.createComponent(<%=classify(name)%>Component);
      component = fixture.componentInstance;
      store = TestBed.inject(Store);
    });
  }));

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('shoud dispatch load <%=name%>s action when ngOnInit is invoked', () => {
    const action = <%=classify(name)%>Action.load<%=classify(name)%>s({filter: {/*TODO fill IStarshipFilter*/}});
    const spy = jest.spyOn(store, 'dispatch');
    fixture.detectChanges();
    component.ngOnInit();
    expect(spy).toHaveBeenCalledWith(action);
  });
});
