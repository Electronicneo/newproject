import { Injectable } from '@angular/core';
import { localStorangeACLKey, allowed } from './access-checker-key';
import * as jsonQuery from 'json-query';
import { selectWorkspace, selectPage, } from '../store/shared.selectors';
import { setPage, setWorkSpace, setLocaleInfo } from '../store/shared.actions';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class AccessCheckerService {
    constructor(store$) {
        this.store$ = store$;
        this.workspaceSelected = null;
        this.pageId = null;
        this.workspaceSelected$ = this.store$.select(selectWorkspace);
        this.page$ = this.store$.select(selectPage);
        this.workspaceSelected$.subscribe(ws => this.workspaceSelected = ws);
        this.page$.subscribe(page => this.pageId = page);
    }
    clearACLLocalStorage() {
        localStorage.removeItem(localStorangeACLKey);
    }
    setWorkSpaceSelected(workspaceId) {
        this.store$.dispatch(setWorkSpace({ workspaceID: workspaceId }));
    }
    getWorkSpaceSelected() {
        return this.workspaceSelected;
    }
    setPageSelected(pageId) {
        this.store$.dispatch(setPage({ pageID: pageId }));
    }
    setLocaleCode(languageCode, countryCode, timezoneCode) {
        this.store$.dispatch(setLocaleInfo({ languageCode: languageCode, countryCode: countryCode, timezoneCode: timezoneCode }));
    }
    isFeatureRouteGranted(featureLabel) {
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_PAGES`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.label.toLowerCase() == featureLabel.toLowerCase()).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isPageRouteGranted(pageId) {
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_PAGESCOMP`];
        if (serviceList && serviceList.length > 0 && serviceList.filter(service => service.keyUuid == pageId).length > 0) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isWidgetGrantedByLabel(serviceLabel, pageId, widgetId) {
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_${pageId}_${widgetId}_SERVICESWIDGET`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.label == serviceLabel).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isPageGrantedByLabel(serviceLabel, pageId) {
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_${pageId}_SERVICESPAGESCOMP`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.label == serviceLabel).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isWidgetGrantedById(serviceId, pageId, widgetId) {
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_${pageId}_${widgetId}_SERVICESWIDGET`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.keyUuid == serviceId).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isFeatureGrantedById(serviceId) {
        if (!this.workspaceSelected) {
            return false;
        }
        if (this.checkSpecialSelect(this.getPemissions()[`${this.workspaceSelected}_PAGES`])) {
            return true;
        }
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_${this.pageId}_SERVICESPAGES`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.keyUuid == serviceId).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isFeatureGrantedByLabel(serviceLabel) {
        if (!this.workspaceSelected) {
            return false;
        }
        if (this.checkSpecialSelect(this.getPemissions()[`${this.workspaceSelected}_PAGES`])) {
            return true;
        }
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_${this.pageId}_SERVICESPAGES`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.label == serviceLabel).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    isPageGrantedById(serviceId) {
        let result;
        let serviceList = [];
        serviceList = this.getPemissions()[`${this.workspaceSelected}_${this.pageId}_SERVICESPAGESCOMP`];
        if (serviceList && serviceList.length > 0 && (this.checkSpecialSelect(serviceList) || serviceList.filter(service => service.keyUuid == serviceId).length > 0)) {
            result = true;
        }
        else {
            result = false;
        }
        return result;
    }
    generateFeatureSecurityParamBody(resourceId) {
        let result = {};
        result['context'] = {};
        let userContextMetadata = result['context']['userContextMetadata'] = {};
        userContextMetadata['username'] = this.getUserName();
        userContextMetadata['authPermissionPath'] = `${this.workspaceSelected}_${this.pageId}_SERVICESPAGES`;
        userContextMetadata['resourceId'] = resourceId;
        userContextMetadata['parentType'] = 'PAGES';
        return result;
    }
    generateFeatureSecurityParamBodyByLabel(resourceLabel) {
        let result = {};
        result['context'] = {};
        let userContextMetadata = result['context']['userContextMetadata'] = {};
        const serviceList = this.getPemissions()[`${this.workspaceSelected}_${this.pageId}_SERVICESPAGES`];
        let serviceItem = serviceList != null ? serviceList.find(service => service.label == resourceLabel) : null;
        userContextMetadata['username'] = this.getUserName();
        userContextMetadata['authPermissionPath'] = `${this.workspaceSelected}_${this.pageId}_SERVICESPAGES`;
        userContextMetadata['resourceId'] = serviceItem != null ? serviceItem.keyUuid : '';
        userContextMetadata['parentType'] = 'PAGES';
        return result;
    }
    generateComposerPageSecurityParamBody(resourceId) {
        let result = {};
        result['context'] = {};
        let userContextMetadata = result['context']['userContextMetadata'] = {};
        userContextMetadata['username'] = this.getUserName();
        userContextMetadata['authPermissionPath'] = `${this.workspaceSelected}_${this.pageId}SERVICESPAGESCOMP`;
        userContextMetadata['resourceId'] = resourceId;
        userContextMetadata['parentType'] = 'PAGESCOMP';
        return result;
    }
    getAuthPermissionPath() {
        return `${this.workspaceSelected}_${this.pageId}`;
    }
    getWorkSpace() {
        return this.workspaceSelected;
    }
    getWorkPage() {
        return this.pageId;
    }
    getPemissions() {
        return this.getACL().authPermissions;
    }
    getWorkSpaces() {
        return this.getPemissions().WORKSPACE;
    }
    getFullName() {
        return this.getACL().fullName;
    }
    // sta fuori dal contesto
    getRoleName() {
        return this.getACL().nomeRuolo;
    }
    getUserName() {
        return this.getACL().userName;
    }
    getNodeBreadcrumb() {
        return this.getACL().nodeBreadcrumb;
    }
    getRootName() {
        return this.getACL().rootName;
    }
    getUserUUID() {
        return this.getACL().userUuid;
    }
    getKeyOid() {
        return this.getACL().keyOid;
    }
    getEnablingUuid() {
        return this.getACL().enablingUuid;
    }
    getLanguageCode() {
        return this.getACL().languageCode;
    }
    getCountryCode() {
        return this.getACL().countryCode;
    }
    getTimeZoneCode() {
        return this.getACL().timeZoneCode;
    }
    getACL() {
        return JSON.parse(localStorage.getItem(localStorangeACLKey));
    }
    setACLLocalStorage(revoContext) {
        localStorage.setItem(localStorangeACLKey, JSON.stringify(this.createUserInfo(revoContext)));
    }
    createUserInfo(revoContext) {
        const userContextMetadata = revoContext.context.userContextMetadata;
        const context = revoContext.context;
        const permissionsAndUserInfo = {
            authPermissions: JSON.parse(userContextMetadata.authPermissions),
            keyOid: userContextMetadata.keyOid,
            rootName: userContextMetadata.rootName,
            userUuid: userContextMetadata.userUuid,
            fullName: userContextMetadata.fullName,
            userName: context.userName,
            nomeRuolo: context.nomeRuolo,
            nodeBreadcrumb: userContextMetadata.nodeBreadcrumb,
            enablingUuid: userContextMetadata.enablingUuid,
            countryCode: userContextMetadata.countryCode,
            languageCode: userContextMetadata.languageCode,
            timeZoneCode: userContextMetadata.timeZoneCode
        };
        return permissionsAndUserInfo;
    }
    /*   public setPermissionsAndUserInfo(userInfo: IUserInfo) {
        this.store$.dispatch(setPermissionsAndUserInfo({ userInfo: userInfo }));
      } */
    setNewToken(token) {
        const tokenInfo = {
            createdAt: new Date().getTime(),
            name: "nb:auth:simple:token",
            ownerStrategyName: "username",
            value: token,
        };
        localStorage.setItem('auth_app_token', JSON.stringify(tokenInfo));
    }
    getFeatureIdByFeatureLabel(featureLabel) {
        let result = jsonQuery.default(`${this.workspaceSelected}_PAGES[label=${featureLabel}].keyUuid`, {
            data: this.getPemissions()
        });
        return result.value;
    }
    checkSpecialSelect(serviceList) {
        return allowed.includes(serviceList[0].label);
    }
}
/** @nocollapse */ AccessCheckerService.ɵfac = function AccessCheckerService_Factory(t) { return new (t || AccessCheckerService)(i0.ɵɵinject(i1.Store)); };
/** @nocollapse */ AccessCheckerService.ɵprov = i0.ɵɵdefineInjectable({ token: AccessCheckerService, factory: AccessCheckerService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AccessCheckerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.Store }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,