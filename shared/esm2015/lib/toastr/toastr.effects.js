import { Injectable } from '@angular/core';
import { ofType, createEffect } from '@ngrx/effects';
import { first, tap } from 'rxjs/operators';
import { defaultSuccessMessage, failureMessage, warningMessage } from './toastr.actions';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@nebular/theme";
import * as i3 from "@ngx-translate/core";
export class ToastrEffects {
    constructor(actions$, toastrService, translate) {
        this.actions$ = actions$;
        this.toastrService = toastrService;
        this.translate = translate;
        this.defaultSuccessMessage$ = createEffect(() => this.actions$.pipe(ofType(defaultSuccessMessage), tap(action => {
            let title;
            this.translate.get('toastr.operationSuccess').pipe(first()).subscribe(text => this.toastrService.success('', text));
        })), { dispatch: false });
        this.errorMessage$ = createEffect(() => this.actions$.pipe(ofType(failureMessage), tap(action => {
            this.translate.get([action.message, action.title]).pipe(first()).subscribe(text => { this.toastrService.danger(text[Object.keys(text)[0]], text[Object.keys(text)[1]]); });
        })), { dispatch: false });
        this.warningMessage$ = createEffect(() => this.actions$.pipe(ofType(warningMessage), tap(action => { this.toastrService.warning('', action.message, { destroyByClick: true, duration: 0 }); })), { dispatch: false });
    }
}
/** @nocollapse */ ToastrEffects.ɵfac = function ToastrEffects_Factory(t) { return new (t || ToastrEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.NbToastrService), i0.ɵɵinject(i3.TranslateService)); };
/** @nocollapse */ ToastrEffects.ɵprov = i0.ɵɵdefineInjectable({ token: ToastrEffects, factory: ToastrEffects.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ToastrEffects, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.Actions }, { type: i2.NbToastrService }, { type: i3.TranslateService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RyLmVmZmVjdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaGFyZWQvIiwic291cmNlcyI6WyJsaWIvdG9hc3RyL3RvYXN0ci5lZmZlY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFXLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7OztBQWN6RixNQUFNLE9BQU8sYUFBYTtJQXFDeEIsWUFDVSxRQUFpQixFQUNqQixhQUE4QixFQUM5QixTQUEyQjtRQUYzQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQUM5QixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQXJDckMsMkJBQXNCLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEVBQzdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNYLElBQUksS0FBSyxDQUFDO1lBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUUsQ0FBQztRQUV4SCxDQUFDLENBQUMsQ0FFSCxFQUNELEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUNwQixDQUFDO1FBRUYsa0JBQWEsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsY0FBYyxDQUFDLEVBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBRSxDQUFDO1FBQzVLLENBQUMsQ0FBQyxDQUVILEVBQ0QsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQ3BCLENBQUM7UUFHRixvQkFBZSxHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBRXpHLEVBQ0QsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQ3BCLENBQUM7SUFNRSxDQUFDOzs2RkF6Q00sYUFBYTt3RUFBYixhQUFhLFdBQWIsYUFBYSxtQkFIVixNQUFNO2tEQUdULGFBQWE7Y0FMekIsVUFBVTtlQUNUO2dCQUNFLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3Rpb25zLCBvZlR5cGUsIGNyZWF0ZUVmZmVjdCB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBmaXJzdCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBkZWZhdWx0U3VjY2Vzc01lc3NhZ2UsIGZhaWx1cmVNZXNzYWdlLCB3YXJuaW5nTWVzc2FnZSB9IGZyb20gJy4vdG9hc3RyLmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBOYlRvYXN0clNlcnZpY2UgfSBmcm9tICdAbmVidWxhci90aGVtZSc7XHJcblxyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuQEluamVjdGFibGUoXHJcbiAge1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbiAgfVxyXG4pXHJcbmV4cG9ydCBjbGFzcyBUb2FzdHJFZmZlY3RzIHtcclxuXHJcblxyXG4gIGRlZmF1bHRTdWNjZXNzTWVzc2FnZSQgPSBjcmVhdGVFZmZlY3QoKCkgPT5cclxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgb2ZUeXBlKGRlZmF1bHRTdWNjZXNzTWVzc2FnZSksXHJcbiAgICAgIHRhcChhY3Rpb24gPT4ge1xyXG4gICAgICAgIGxldCB0aXRsZTtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZS5nZXQoJ3RvYXN0ci5vcGVyYXRpb25TdWNjZXNzJykucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUodGV4dCA9PiAgdGhpcy50b2FzdHJTZXJ2aWNlLnN1Y2Nlc3MoJycsIHRleHQpICk7XHJcbiAgICAgICBcclxuICAgICAgfSksXHJcblxyXG4gICAgKSxcclxuICAgIHsgZGlzcGF0Y2g6IGZhbHNlIH1cclxuICApO1xyXG5cclxuICBlcnJvck1lc3NhZ2UkID0gY3JlYXRlRWZmZWN0KCgpID0+XHJcbiAgICB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICAgIG9mVHlwZShmYWlsdXJlTWVzc2FnZSksXHJcbiAgICAgIHRhcChhY3Rpb24gPT4geyBcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZS5nZXQoW2FjdGlvbi5tZXNzYWdlLCBhY3Rpb24udGl0bGVdKS5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSh0ZXh0ID0+IHt0aGlzLnRvYXN0clNlcnZpY2UuZGFuZ2VyKHRleHRbT2JqZWN0LmtleXModGV4dClbMF1dLCB0ZXh0W09iamVjdC5rZXlzKHRleHQpWzFdXSkgfSApO1xyXG4gICAgICB9KSxcclxuXHJcbiAgICApLFxyXG4gICAgeyBkaXNwYXRjaDogZmFsc2UgfVxyXG4gICk7XHJcblxyXG5cclxuICB3YXJuaW5nTWVzc2FnZSQgPSBjcmVhdGVFZmZlY3QoKCkgPT5cclxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgb2ZUeXBlKHdhcm5pbmdNZXNzYWdlKSxcclxuICAgICAgdGFwKGFjdGlvbiA9PiB7IHRoaXMudG9hc3RyU2VydmljZS53YXJuaW5nKCcnLCBhY3Rpb24ubWVzc2FnZSwgeyBkZXN0cm95QnlDbGljazogdHJ1ZSwgZHVyYXRpb246IDAgfSkgfSksXHJcblxyXG4gICAgKSxcclxuICAgIHsgZGlzcGF0Y2g6IGZhbHNlIH1cclxuICApO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXHJcbiAgICBwcml2YXRlIHRvYXN0clNlcnZpY2U6IE5iVG9hc3RyU2VydmljZSxcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlXHJcbiAgKSB7IH1cclxufVxyXG4iXX0=